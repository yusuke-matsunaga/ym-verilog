#ifndef EIBINARYOP_H
#define EIBINARYOP_H

/// @file EiBinaryOp.h
/// @brief EiExpr の2項演算子の派生クラスのヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2005-2011, 2014, 2020 Yusuke Matsunaga
/// All rights reserved.

//////////////////////////////////////////////////////////////////////
/// expression を表すクラス
/// IEEE Std 1364-2001 26.6.25 Simple expressions
/// IEEE Std 1364-2001 26.6.26 Expressions
///
/// operation の分類
/// オペランドの数
///
/// - 2個
///   - 返り値 scalar, オペランド any
///     - EqOp, NeqOp, CaseEqOp, CaseNeqOp, GtOp, GeOp, LtOp, LeOp
///   - 返り値 scalar, オペランド scalar
///     - LogAndOp, LogOrOp
///   - 返り値 オペランドと同一, オペランド bitvector
///     - BitAndOp, BitOrOp, BitXorOp, BitXNorOp
///   - 返り値 オペランドと同一, オペランド any
///     - AddOp, SubOp, MultOp, DivOp, ModOp
///     - PowerOp
///   - 返り値 第1オペランドと同一, オペランド any
///     - LShiftOp, RShiftOp, ArithLShiftOp, ArithRShiftOp
//////////////////////////////////////////////////////////////////////

#include "EiOperation.h"


BEGIN_NAMESPACE_YM_VERILOG

//////////////////////////////////////////////////////////////////////
/// @class EiBinaryOp EiBinaryOp.h "EiBinaryOp.h"
/// @brief 二項演算子を表すクラス
//////////////////////////////////////////////////////////////////////
class EiBinaryOp :
  public EiOperation
{
public:

  /// @brief コンストラクタ
  EiBinaryOp(
    const PtExpr* pt_expr, ///< [in] パース木の定義要素
    ElbExpr* opr1,         ///< [in] オペランド1
    ElbExpr* opr2          ///< [in] オペランド2
  );

  /// @brief デストラクタ
  ~EiBinaryOp();


public:
  //////////////////////////////////////////////////////////////////////
  // VlExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 定数の時 true を返す．
  bool
  is_const() const override;

  /// @brief オペランド数を返す．
  SizeType
  operand_num() const override;

  /// @brief オペランドを返す．
  const VlExpr*
  operand(
    SizeType pos
  ) const override;

  /// @brief オペランドのリストを返す．
  vector<const VlExpr*>
  operand_list() const override;


protected:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // オペランド
  ElbExpr* mOpr[2];

};


//////////////////////////////////////////////////////////////////////
/// @class EiCompareOp EiBinaryOp.h "EiBinaryOp.h"
/// @brief 比較演算子の基底クラス
//////////////////////////////////////////////////////////////////////
class EiCompareOp :
  public EiBinaryOp
{
public:

  /// @brief コンストラクタ
  EiCompareOp(
    const PtExpr* pt_expr, ///< [in] パース木の定義要素
    ElbExpr* opr1,         ///< [in] オペランド1
    ElbExpr* opr2          ///< [in] オペランド2
  );

  /// @brief デストラクタ
  ~EiCompareOp();


public:
  //////////////////////////////////////////////////////////////////////
  // VlExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 式のタイプを返す．
  VlValueType
  value_type() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // ElbExpr の設定用の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 要求される式の型を計算してセットする．
  void
  _set_reqsize(
    const VlValueType& type ///< [in] 要求される式の型
  ) override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // オペランドの型
  VlValueType mOprType;

};


//////////////////////////////////////////////////////////////////////
/// @class EiBinaryLogOp EiBinaryOp.h "EiBinaryOp.h"
/// @brief 2項論理演算子の基底クラス
//////////////////////////////////////////////////////////////////////
class EiBinaryLogOp :
  public EiBinaryOp
{
public:

  /// @brief コンストラクタ
  EiBinaryLogOp(
    const PtExpr* pt_expr, ///< [in] パース木の定義要素
    ElbExpr* opr1,         ///< [in] オペランド1
    ElbExpr* opr2          ///< [in] オペランド2
  );

  /// @brief デストラクタ
  ~EiBinaryLogOp();


public:
  //////////////////////////////////////////////////////////////////////
  // VlExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 式のタイプを返す．
  VlValueType
  value_type() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // ElbExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 要求される式の型を計算してセットする．
  void
  _set_reqsize(
    const VlValueType& type ///< [in] 要求される式の型
  ) override;

};


//////////////////////////////////////////////////////////////////////
/// @class EiBinaryBitOp EiBinaryOp.h "EiBinaryOp.h"
/// @brief 2項論理演算子の基底クラス
//////////////////////////////////////////////////////////////////////
class EiBinaryBitOp :
  public EiBinaryOp
{
public:

  /// @brief コンストラクタ
  EiBinaryBitOp(
    const PtExpr* pt_expr, ///< [in] パース木の定義要素
    ElbExpr* opr1,	   ///< [in] オペランド1
    ElbExpr* opr2	   ///< [in] オペランド2
  );

  /// @brief デストラクタ
  ~EiBinaryBitOp();


public:
  //////////////////////////////////////////////////////////////////////
  // VlExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 式のタイプを返す．
  VlValueType
  value_type() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // ElbExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 要求される式の型を計算してセットする．
  void
  _set_reqsize(
    const VlValueType& type ///< [in] 要求される式の型
  ) override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 式の型
  VlValueType mType;

};


//////////////////////////////////////////////////////////////////////
/// @class EiBinaryArithOp EiBinaryOp.h "EiBinaryOp.h"
/// @brief 2項算術演算子の基底クラス
//////////////////////////////////////////////////////////////////////
class EiBinaryArithOp :
  public EiBinaryOp
{
public:

  /// @brief コンストラクタ
  EiBinaryArithOp(
    const PtExpr* pt_expr, ///< [in] パース木の定義要素
    ElbExpr* opr1,	   ///< [in] オペランド1
    ElbExpr* opr2	   ///< [in] オペランド2
  );

  /// @brief デストラクタ
  ~EiBinaryArithOp();


public:
  //////////////////////////////////////////////////////////////////////
  // VlExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 式のタイプを返す．
  VlValueType
  value_type() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // ElbExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 要求される式の型を計算してセットする．
  void
  _set_reqsize(
    const VlValueType& type ///< [in] 要求される式の型
  ) override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 式の型
  VlValueType mType;

};


//////////////////////////////////////////////////////////////////////
/// @class EiPowerOp EiBinaryOp.h "EiBinaryOp.h"
/// @brief べき乗算演算子
//////////////////////////////////////////////////////////////////////
class EiPowerOp :
  public EiBinaryOp
{
public:

  /// @brief コンストラクタ
  EiPowerOp(
    const PtExpr* pt_expr, ///< [in] パース木の定義要素
    ElbExpr* opr1,	   ///< [in] オペランド1
    ElbExpr* opr2	   ///< [in] オペランド2
  );

  /// @brief デストラクタ
  ~EiPowerOp();


public:
  //////////////////////////////////////////////////////////////////////
  // VlExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 式のタイプを返す．
  VlValueType
  value_type() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // ElbExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 要求される式の型を計算してセットする．
  void
  _set_reqsize(
    const VlValueType& type ///< [in] 要求される式の型
  ) override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 式の型
  VlValueType mType;

};


//////////////////////////////////////////////////////////////////////
/// @class EiShiftOp EiBinaryOp.h "EiBinaryOp.h"
/// @brief シフト演算子の基底クラス
//////////////////////////////////////////////////////////////////////
class EiShiftOp :
  public EiBinaryOp
{
public:

  /// @brief コンストラクタ
  EiShiftOp(
    const PtExpr* pt_expr, ///< [in] パース木の定義要素
    ElbExpr* opr1,	   ///< [in] オペランド1
    ElbExpr* opr2	   ///< [in] オペランド2
  );

  /// @brief デストラクタ
  ~EiShiftOp();


public:
  //////////////////////////////////////////////////////////////////////
  // VlExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 式のタイプを返す．
  VlValueType
  value_type() const override;


public:
  //////////////////////////////////////////////////////////////////////
  // ElbExpr の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 要求される式の型を計算してセットする．
  void
  _set_reqsize(
    const VlValueType& type ///< [in] 要求される式の型
  ) override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 式の型
  VlValueType mType;

};

END_NAMESPACE_YM_VERILOG

#endif // EIBINARYOP_H
