#ifndef OBJHANDLESUB_H
#define OBJHANDLESUB_H

/// @file ObjHandleSub.h
/// @brief ObjHandleSub のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2005-2011, 2014, 2020 Yusuke Matsunaga
/// All rights reserved.

#include "elaborator/ObjHandle.h"


BEGIN_NAMESPACE_YM_VERILOG

//////////////////////////////////////////////////////////////////////
/// @class KeyObjHandle KeyObjHandle.h "KeyObjHandle.h"
/// @brief 検索用のキーを表すクラス
//////////////////////////////////////////////////////////////////////
class KeyObjHandle :
  public ObjHandle
{
public:

  /// @brief コンストラクタ
  KeyObjHandle(
    const VlScope* parent, ///< [in] 親のスコープ
    const string& name     ///< [in] 名前
  );

  /// @brief デストラクタ
  ~KeyObjHandle() = default;


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 親のスコープを返す．
  const VlScope*
  parent_scope() const override;

  /// @brief オブジェクトの名前を返す．
  string
  name() const override;

  /// @brief オブジェクトの型を返す．
  VpiObjType
  type() const override;

  /// @brief ファイル位置の取得
  FileRegion
  file_region() const override;

  /// @brief オブジェクトの階層付き名前を返す．
  string
  full_name() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 親のスコープ
  const VlScope* mParent;

  // 名前
  string mName;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbScopeHandle
//////////////////////////////////////////////////////////////////////
class ElbScopeHandle :
  public ObjHandle
{
public:

  /// @brief コンストラクタ
  ElbScopeHandle(
    const VlScope* obj
  );

  /// @brief デストラクタ
  ~ElbScopeHandle() = default;


public:

  /// @brief 親のスコープを返す．
  const VlScope*
  parent_scope() const override;

  /// @brief オブジェクトの名前を返す．
  string
  name() const override;

  /// @brief オブジェクトの型を返す．
  VpiObjType
  type() const override;

  /// @brief ファイル位置の取得
  FileRegion
  file_region() const override;

  /// @brief オブジェクトの階層付き名前を返す．
  string
  full_name() const override;

  /// @brief VlScope を返す．
  const VlScope*
  scope() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  const VlScope* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class NamedObjHandle ObjHandle.h "ObjHandle.h"
//////////////////////////////////////////////////////////////////////
class NamedObjHandle :
  public ObjHandle
{
public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 親のスコープを返す．
  const VlScope*
  parent_scope() const override;

  /// @brief オブジェクトの名前を返す．
  string
  name() const override;

  /// @brief オブジェクトの型を返す．
  VpiObjType
  type() const override;

  /// @brief ファイル位置の取得
  FileRegion
  file_region() const override;

  /// @brief オブジェクトの階層付き名前を返す．
  string
  full_name() const override;

  /// @brief ハッシュ値を返す．
  SizeType
  hash() const;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  virtual
  const VlNamedObj*
  _namedobj() const = 0;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbTaskFuncHandle
//////////////////////////////////////////////////////////////////////
class ElbTaskFuncHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbTaskFuncHandle(
    const VlTaskFunc* obj
  );

  /// @brief デストラクタ
  ~ElbTaskFuncHandle() = default;


public:

  /// @brief ElbTaskFunc を返す．
  const VlTaskFunc*
  taskfunc() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  const VlTaskFunc* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbDeclHandle
//////////////////////////////////////////////////////////////////////
class ElbDeclHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbDeclHandle(
    ElbDecl* obj
  );

  /// @brief デストラクタ
  ~ElbDeclHandle() = default;


public:


  /// @brief ElbDecl を返す．
  ElbDecl*
  decl() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  ElbDecl* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbDeclArrayHandle
//////////////////////////////////////////////////////////////////////
class ElbDeclArrayHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbDeclArrayHandle(
    const VlDeclArray* obj
  );

  /// @brief デストラクタ
  ~ElbDeclArrayHandle() = default;


public:

  /// @brief ElbDeclArray を返す．
  const VlDeclArray*
  declarray() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  const VlDeclArray* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbParamHandle
//////////////////////////////////////////////////////////////////////
class ElbParamHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbParamHandle(
    ElbParameter* obj
  );

  /// @brief デストラクタ
  ~ElbParamHandle() = default;


public:

  /// @brief ElbParameterを返す．
  ElbParameter*
  parameter() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  ElbParameter* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbModuleHandle
//////////////////////////////////////////////////////////////////////
class ElbModuleHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbModuleHandle(
    const VlModule* obj
  );

  /// @brief デストラクタ
  ~ElbModuleHandle() = default;


public:

  /// @brief VlModule を返す．
  const VlModule*
  module() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  const VlModule* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbModuleArrayHandle
//////////////////////////////////////////////////////////////////////
class ElbModuleArrayHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbModuleArrayHandle(
    const VlModuleArray* obj
  );

  /// @brief デストラクタ
  ~ElbModuleArrayHandle() = default;


public:

  /// @brief 配列要素を返す．
  const VlScope*
  array_elem(
    int index
  ) const override;

  /// @brief ElbModuleArray を返す．
  const VlModuleArray*
  module_array() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  const VlModuleArray* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbPrimArrayHandle
//////////////////////////////////////////////////////////////////////
class ElbPrimArrayHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbPrimArrayHandle(
    const VlPrimArray* obj
  );

  /// @brief デストラクタ
  ~ElbPrimArrayHandle() = default;


public:

  /// @brief ElbPrimArray を返す．
  const VlPrimArray*
  prim_array() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  const VlPrimArray* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbPrimitiveHandle
//////////////////////////////////////////////////////////////////////
class ElbPrimitiveHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbPrimitiveHandle(
    const VlPrimitive* obj
  );

  /// @brief デストラクタ
  ~ElbPrimitiveHandle() = default;


public:

  /// @brief ElbPrimitive を返す．
  const VlPrimitive*
  primitive() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  const VlPrimitive* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbGfRootHandle
//////////////////////////////////////////////////////////////////////
class ElbGfRootHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbGfRootHandle(
    ElbGfRoot* obj
  );

  /// @brief デストラクタ
  ~ElbGfRootHandle() = default;


public:

  /// @brief 配列要素を返す．
  const VlScope*
  array_elem(
    int index
  ) const override;

  /// @brief ElbGfRoot を返す．
  ElbGfRoot*
  gfroot() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  ElbGfRoot* mObj;

};


//////////////////////////////////////////////////////////////////////
/// @class ElbGenvarHandle
//////////////////////////////////////////////////////////////////////
class ElbGenvarHandle :
  public NamedObjHandle
{
public:

  /// @brief コンストラクタ
  ElbGenvarHandle(
    ElbGenvar* obj
  );

  /// @brief デストラクタ
  ~ElbGenvarHandle() = default;


public:

  /// @brief ElbGenvar を返す．
  ElbGenvar*
  genvar() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // NamedObjHandle の仮想関数
  //////////////////////////////////////////////////////////////////////

  /// @brief 対象のオブジェクトを返す．
  const VlNamedObj*
  _namedobj() const override;


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 対象のオブジェクト
  ElbGenvar* mObj;

};

END_NAMESPACE_YM_VERILOG

#endif // OBJHANDLESUB_H
